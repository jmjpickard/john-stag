import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import React from "react";
import { Button } from "~/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Toaster } from "~/components/ui/toaster";
import { useToast } from "~/components/ui/use-toast";
import { api } from "~/utils/api";

interface Props {
  onClick: () => void;
}

const NewGame = ({ onClick }: Props) => {
  const { toast } = useToast();
  const router = useRouter();
  const newGame = api.game.create.useMutation({
    onMutate: () =>
      toast({
        title: "Creating game...",
        description: "Please wait a moment",
      }),
    onSuccess: () => {
      toast({
        title: "Game created!",
        description: "Now adding you as a player",
      });
    },
  });
  const joinGame = api.game.join.useMutation({
    onMutate: () =>
      toast({
        title: "Joining game...",
        description: "Please wait a moment",
      }),
    onSuccess: (data) => {
      console.log(data, `game/${data.game.id}?playerId=${data.player.id}`);
      toast({
        title: "Game joined!",
        description: "Let's get fishing!",
        onAnimationEnd: () => {
          router.push(`/game/${data.game.id}?playerId=${data.player.id}`);
        },
      });
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Game not found",
        description: "Please check the game ID and try again",
      });
    },
  });
  const [name, setName] = React.useState("");
  const [player, setPlayer] = React.useState("");
  const onCreateGame = async () => {
    const game = await newGame.mutateAsync({ name });
    const { id } = game;
    await joinGame.mutateAsync({ id, playerName: player });
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Card className="w-[350px] text-3xl">
        <CardHeader>
          <CardTitle>New Game</CardTitle>
          <CardDescription>A brand new fishing comp!</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col gap-5">
            <div className="flex flex-col space-y-1.5">
              <Label htmlFor="name">Game title</Label>
              <Input
                id="name"
                placeholder="Enter the fishy title"
                onChange={(val) => setName(val.currentTarget.value)}
              />
            </div>
            <div className="flex flex-col space-y-1.5">
              <Label htmlFor="name">Player name</Label>
              <Input
                id="name"
                placeholder="Enter your name"
                onChange={(val) => setPlayer(val.currentTarget.value)}
              />
            </div>
            <div className="flex flex-row justify-between gap-10 ">
              <Button variant="outline" onClick={onClick}>
                Back
              </Button>
              <Button variant="default" onClick={onCreateGame}>
                Create Game
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </>
  );
};

const JoinGame = ({ onClick }: Props) => {
  const { toast } = useToast();
  const router = useRouter();
  const joinGame = api.game.join.useMutation({
    onMutate: () =>
      toast({
        title: "Joining game...",
        description: "Please wait a moment",
      }),
    onSuccess: (data) => {
      toast({
        title: "Game joined!",
        description: "Let's get fishing!",
        onAnimationEnd: () => {
          router.push(`/game/${data.game.id}?playerId=${data.player.id}`);
        },
      });
    },
    onError: () => {
      toast({
        variant: "destructive",
        title: "Game not found",
        description: "Please check the game ID and try again",
      });
    },
  });

  const [name, setName] = React.useState("");
  const [gameId, setGameId] = React.useState("");
  const onJoinGame = async () => {
    await joinGame.mutateAsync({ id: gameId, playerName: name });
  };
  return (
    <Card className="w-[350px] text-3xl">
      <CardHeader>
        <CardTitle>Join Game</CardTitle>
        <CardDescription>Enter game ID and player name</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col gap-5">
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="name">Game ID</Label>
            <Input
              id="name"
              placeholder="Enter the fishy ID"
              onChange={(val) => setGameId(val.currentTarget.value)}
            />
          </div>
          <div className="flex flex-col space-y-1.5">
            <Label htmlFor="name">Fisherman name</Label>
            <Input
              id="name"
              placeholder="What's your player name?"
              onChange={(val) => setName(val.currentTarget.value)}
            />
          </div>
          <div className="flex flex-row justify-between gap-10">
            <Button variant="outline" onClick={onClick}>
              Back
            </Button>
            <Button variant="destructive" onClick={onJoinGame}>
              Join Game
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default function Home() {
  const [join, setJoin] = React.useState(false);
  const [newGame, setNewGame] = React.useState(false);

  const onBackClick = () => {
    setJoin(false);
    setNewGame(false);
  };
  return (
    <>
      <main className="font-arcade flex min-h-screen flex-col items-center justify-center gap-10 text-3xl">
        <h1>John's Hookers</h1>
        {!join && !newGame && (
          <div className="flex flex-row gap-5">
            <Button variant="destructive" onClick={() => setJoin(true)}>
              Join Game
            </Button>
            <Button variant="default" onClick={() => setNewGame(true)}>
              New Game
            </Button>
          </div>
        )}
        {join && <JoinGame onClick={onBackClick} />}
        {newGame && <NewGame onClick={onBackClick} />}
        <Toaster />
      </main>
    </>
  );
}
